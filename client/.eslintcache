[{"F:\\pcell-ifair-portal-original\\client\\src\\index.js":"1","F:\\pcell-ifair-portal-original\\client\\src\\utils\\StateProvider.js":"2","F:\\pcell-ifair-portal-original\\client\\src\\reportWebVitals.js":"3","F:\\pcell-ifair-portal-original\\client\\src\\utils\\reducer.js":"4","F:\\pcell-ifair-portal-original\\client\\src\\App.js":"5","F:\\pcell-ifair-portal-original\\client\\src\\utils\\setUser.js":"6","F:\\pcell-ifair-portal-original\\client\\src\\home\\Home.js":"7","F:\\pcell-ifair-portal-original\\client\\src\\register\\RegistrationForm.js":"8","F:\\pcell-ifair-portal-original\\client\\src\\Help\\Help.js":"9","F:\\pcell-ifair-portal-original\\client\\src\\profile\\profile.js":"10","F:\\pcell-ifair-portal-original\\client\\src\\login\\login.js":"11","F:\\pcell-ifair-portal-original\\client\\src\\components\\footer\\Footer.js":"12","F:\\pcell-ifair-portal-original\\client\\src\\utils\\firebase\\firebaseConfig.js":"13","F:\\pcell-ifair-portal-original\\client\\src\\other\\CoursesList.js":"14","F:\\pcell-ifair-portal-original\\client\\src\\admin\\AdminLogin.js":"15","F:\\pcell-ifair-portal-original\\client\\src\\components\\userProfile.js\\UserProfile.js":"16","F:\\pcell-ifair-portal-original\\client\\src\\admin\\Logistics.js":"17","F:\\pcell-ifair-portal-original\\client\\src\\downloadData\\downloadData.js":"18","F:\\pcell-ifair-portal-original\\client\\src\\company-grid\\Grid.js":"19","F:\\pcell-ifair-portal-original\\client\\src\\companyPage\\CompanyPage.js":"20"},{"size":701,"mtime":1611513037111,"results":"21","hashOfConfig":"22"},{"size":375,"mtime":1611513052383,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"22"},{"size":629,"mtime":1613142995098,"results":"25","hashOfConfig":"22"},{"size":1611,"mtime":1613143125012,"results":"26","hashOfConfig":"22"},{"size":961,"mtime":1612529248072,"results":"27","hashOfConfig":"22"},{"size":2830,"mtime":1612522274243,"results":"28","hashOfConfig":"22"},{"size":18996,"mtime":1612767374971,"results":"29","hashOfConfig":"22"},{"size":2719,"mtime":1612245944815,"results":"30","hashOfConfig":"22"},{"size":16433,"mtime":1613142942501,"results":"31","hashOfConfig":"22"},{"size":4504,"mtime":1612863021303,"results":"32","hashOfConfig":"22"},{"size":614,"mtime":1612418811350,"results":"33","hashOfConfig":"22"},{"size":758,"mtime":1612201648823,"results":"34","hashOfConfig":"22"},{"size":671,"mtime":1612461848023,"results":"35","hashOfConfig":"22"},{"size":1623,"mtime":1612693263072,"results":"36","hashOfConfig":"22"},{"size":6607,"mtime":1613142579119,"results":"37","hashOfConfig":"22"},{"size":2291,"mtime":1613142412023,"results":"38","hashOfConfig":"22"},{"size":3692,"mtime":1612902279268,"results":"39","hashOfConfig":"22"},{"size":1557,"mtime":1613143303128,"results":"40","hashOfConfig":"22"},{"size":122,"mtime":1613141897487,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"9wsnr",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\pcell-ifair-portal-original\\client\\src\\index.js",[],["88","89"],"F:\\pcell-ifair-portal-original\\client\\src\\utils\\StateProvider.js",[],"F:\\pcell-ifair-portal-original\\client\\src\\reportWebVitals.js",[],"F:\\pcell-ifair-portal-original\\client\\src\\utils\\reducer.js",[],"F:\\pcell-ifair-portal-original\\client\\src\\App.js",[],"F:\\pcell-ifair-portal-original\\client\\src\\utils\\setUser.js",["90","91","92"],"import { auth, storage, firestore } from \"../utils/firebase/firebaseConfig\";\r\n\r\nconst setUser = async (id) => {\r\n  if (!id) {\r\n    return null;\r\n  }\r\n\r\n  let thisUser = {};\r\n\r\n  await firestore\r\n    .collection(\"users\")\r\n    .doc(`${id}`)\r\n    .get()\r\n    .then(async (doc) => {\r\n      thisUser = { ...thisUser, ...doc.data() };\r\n\r\n      let properties = {\r\n        admission: null,\r\n        resume: null,\r\n        proofOfResume: null,\r\n      };\r\n\r\n      for (const property in properties) {\r\n        await storage\r\n          .ref()\r\n          .child(\"users\")\r\n          .child(`${id}`)\r\n          .child(property.toString())\r\n          .getDownloadURL()\r\n          .then((url) => {\r\n            thisUser = { ...thisUser, [property]: url };\r\n          })\r\n          .catch((err) => {\r\n            console.log(err);\r\n            thisUser = { ...thisUser, [property]: null };\r\n          });\r\n      }\r\n    });\r\n\r\n  return thisUser;\r\n};\r\n\r\nexport default setUser;\r\n","F:\\pcell-ifair-portal-original\\client\\src\\home\\Home.js",[],"F:\\pcell-ifair-portal-original\\client\\src\\register\\RegistrationForm.js",["93","94"],"import React, { useState, useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport HelpIcon from \"@material-ui/icons/Help\";\r\n\r\nimport {\r\n  storage,\r\n  firestore as db,\r\n  auth,\r\n  functions,\r\n} from \"../utils/firebase/firebaseConfig\";\r\n\r\nimport password from \"generate-password\";\r\nimport coursesList from \"../other/CoursesList\";\r\n\r\nimport \"./RegistrationForm.css\";\r\n\r\nimport { useStateValue } from \"../utils/StateProvider\";\r\n\r\nimport setUser from \"../utils/setUser\";\r\n\r\nconst passwordOptions = {\r\n  length: 10,\r\n  numbers: true,\r\n  excludeSimilarCharacters: true,\r\n  strict: true,\r\n};\r\n\r\nconst sendMail = functions.httpsCallable(\"app\");\r\n\r\nfunction RegistrationForm() {\r\n  const History = useHistory();\r\n\r\n  const [{ user }, dispatch] = useStateValue();\r\n\r\n  const [buttonText, setButtonText] = useState(\"Continue\");\r\n\r\n  const [formValues, setFormValues] = useState({\r\n    fullName: null,\r\n    collegeRollNo: null,\r\n    year: \"1\",\r\n    course: null,\r\n    emailAddress: null,\r\n    contactNumber: null,\r\n    guardianName: null,\r\n    guardianNumber: null,\r\n    college: \"Sri Venkateswara College\",\r\n    approved: false,\r\n    remarks: \"\",\r\n    level: 1,\r\n    sno: \"0\",\r\n  });\r\n\r\n  const [formError, setFormError] = useState({\r\n    fieldMessage: false,\r\n    admission: false,\r\n    resume: false,\r\n    proofOfResume: false,\r\n  });\r\n\r\n  const [filename, setFilename] = useState({\r\n    resume: \"Choose file\",\r\n    admission: \"Choose file\",\r\n    proofOfResume: \"Choose file\",\r\n  });\r\n\r\n  const [uploadFiles, setFiles] = useState({\r\n    admission: null,\r\n    resume: null,\r\n    proofOfResume: null,\r\n  });\r\n\r\n  const [filecheck, setFilecheck] = useState({\r\n    resume: -1,\r\n    proofOfResume: -1,\r\n    admission: -1,\r\n  });\r\n\r\n  const handleFormChange = ({ target: { value, name } }) => {\r\n    setFormValues({ ...formValues, [name]: value });\r\n\r\n    // if (value.length < 1) {\r\n    //   setFormError({\r\n    //     ...formError,\r\n    //     fieldMessage: \"No text field can contain less than 1 characters.\",\r\n    //   });\r\n    // } else {\r\n    //   setFormError({\r\n    //     ...formError,\r\n    //     fieldMessage: 1,\r\n    //   });\r\n    // }\r\n  };\r\n\r\n  const validateForm = () => {\r\n    let errors = { valid: false, list: [] };\r\n\r\n    for (const property in formValues) {\r\n      if (formValues[property] === null) {\r\n        errors.list.push(`${property} cannot be empty.`);\r\n      }\r\n\r\n      if (\r\n        property.toString() === \"contactNumber\" ||\r\n        property.toString() === \"guardianNumber\" ||\r\n        property.toString() === \"collegeRollNo\"\r\n      ) {\r\n        if (formValues[property]?.match(\"^[a-zA-Z]*$\")) {\r\n          errors.list.push(`${property} cannot contain alphabets.`);\r\n        }\r\n      }\r\n    }\r\n\r\n    for (const property in uploadFiles) {\r\n      if (uploadFiles[property] === null) {\r\n        errors.list.push(`${property} cannot be empty.`);\r\n      }\r\n\r\n      if (filecheck[property] === -1) {\r\n        errors.list.push(`${property} is greater than recommended size.`);\r\n      }\r\n    }\r\n\r\n    if (errors.list.length === 0) {\r\n      errors.valid = true;\r\n    }\r\n    return errors;\r\n  };\r\n\r\n  const handleSubmission = async (e) => {\r\n    e.preventDefault();\r\n\r\n    setButtonText(\"Processing\");\r\n\r\n    const result = validateForm();\r\n\r\n    if (result.valid) {\r\n      setButtonText(\"Registering Account\");\r\n\r\n      const newPassword = password.generate(passwordOptions);\r\n\r\n      const storageRef = storage.ref().child(\"users\");\r\n\r\n      await auth\r\n        .createUserWithEmailAndPassword(formValues.emailAddress, newPassword)\r\n        .then(async (userCredential) => {\r\n          await userCredential.user.updateProfile({\r\n            displayName: formValues.collegeRollNo,\r\n          });\r\n\r\n          sendMail({\r\n            to: formValues.emailAddress,\r\n            password: newPassword,\r\n            fullName: formValues.fullName,\r\n          })\r\n            .then(async () => {\r\n              setButtonText(\"Uploading Details\");\r\n\r\n              await db\r\n                .collection(\"users\")\r\n                .doc(`${formValues.collegeRollNo}`)\r\n                .set(formValues)\r\n                // .then(() => {\r\n                //   dispatch({\r\n                //     type: \"SET_USER\",\r\n                //     user: userCredential.user.displayName,\r\n                //   });\r\n                //   History.push(\"/profile\");\r\n                // });\r\n                .then(async () => {\r\n                  setButtonText(\"Uploading Files\");\r\n\r\n                  for (const property in uploadFiles) {\r\n                    const file = uploadFiles[property];\r\n\r\n                    await storageRef\r\n                      .child(`${formValues.collegeRollNo}`)\r\n                      .child(property.toString())\r\n                      .put(file)\r\n                      .then(async (snapshot) => {})\r\n                      .catch((err) => {\r\n                        window.alert(\r\n                          `There was an error in uploading your files.\\nRecommended Browser is Google Chrome. Try again in some time if the error persists.\\nError Message: ${err}`\r\n                        );\r\n\r\n                        History.push(\"/\");\r\n                      });\r\n                  }\r\n                })\r\n                .then(() => {\r\n                  dispatch({\r\n                    type: \"SET_USER\",\r\n                    user: userCredential.user.displayName,\r\n                  });\r\n\r\n                  setUser(userCredential.user.displayName)\r\n                    .then((thisUser) => {\r\n                      dispatch({ type: \"ADD_INFO\", info: thisUser });\r\n                    })\r\n                    .then(() => {\r\n                      History.push(\"/profile\");\r\n                    });\r\n                })\r\n                .catch((err) => {\r\n                  console.log(err);\r\n\r\n                  window.alert(\r\n                    `There was an error in storing your details to the database.\\nRecommended Browser is Google Chrome. Try again in some time if the error persists.\\nError Message: ${err}`\r\n                  );\r\n\r\n                  History.push(\"/\");\r\n                });\r\n            })\r\n            .catch((err) => {\r\n              window.alert(\r\n                `There was an error sending credentials mail. Use Google Chrome or Contact the Technical Team.\\nError Message: ${err}`\r\n              );\r\n            });\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n\r\n          window.alert(\r\n            `There was an error registering your account. Check Inbox to see if you have received a credentials mail or Use Google Chrome or Contact the Technical Team.\\nError Message: ${err}`\r\n          );\r\n\r\n          History.push(\"/\");\r\n        });\r\n    } else {\r\n      var errors = result.list.join(\"\\n\");\r\n      window.alert(`There is an error with your form. Errors: ${errors}`);\r\n      setButtonText(\"Continue\");\r\n    }\r\n  };\r\n\r\n  const onFileUpload = async ({ target: { files, name } }) => {\r\n    const thisFile = files[0];\r\n\r\n    if (name.toString() === \"resume\" && thisFile.size / 1024 > 10 * 1024) {\r\n      setFormError({\r\n        ...formError,\r\n        resume: \"File size limit exceeded.\",\r\n      });\r\n      alert(\"Please upload a file less than 10 MB.\");\r\n      setFilecheck({ ...filecheck, resume: -1 });\r\n    } else if (name.toString() === \"admission\" && thisFile.size / 1024 > 1024) {\r\n      setFormError({\r\n        ...formError,\r\n        admission: \"File size limit exceeded.\",\r\n      });\r\n      alert(\"Please upload a file less than 1 MB.\");\r\n      setFilecheck({ ...filecheck, admission: -1 });\r\n    } else if (\r\n      name.toString() === \"proofOfResume\" &&\r\n      thisFile.size / 1024 > 25 * 1024\r\n    ) {\r\n      setFormError({\r\n        ...formError,\r\n        proofOfResume: \"File size limit exceeded.\",\r\n      });\r\n      alert(\"Please upload a file less than 25 MB.\");\r\n      setFilecheck({ ...filecheck, proofOfResume: -1 });\r\n    } else {\r\n      setFormError({ ...formError, [name]: 1 });\r\n      await setFiles({\r\n        ...uploadFiles,\r\n        [name]: thisFile,\r\n      });\r\n      setFilecheck({ ...filecheck, [name]: 0 });\r\n      setFilename({ ...filename, [name]: thisFile.name });\r\n      setButtonText(\"Continue\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"Register_Page\">\r\n      <a target=\"_blank\" rel=\"noreferrer\" href=\"https://bit.do/fNfw4\">\r\n        <div className=\"help_button\">\r\n          <HelpIcon />\r\n          <p>View Guidelines</p>\r\n        </div>\r\n      </a>\r\n      <div className=\"container\">\r\n        <div className=\"title_box\">\r\n          <Link to=\"/\">\r\n            <img\r\n              src=\"https://firebasestorage.googleapis.com/v0/b/ifair-portal.appspot.com/o/assets%2Fpcell_logo.png?alt=media&token=0fab47f3-c265-4b11-a5a5-162437e594c2\"\r\n              alt=\"The Placement Cell, Sri Venkateswara College { Logo }\"\r\n            />\r\n          </Link>\r\n          <h2>Internship Fair 2021</h2>\r\n          <small>\r\n            The Placement Cell, Sri Venkateswara College, Delhi University\r\n          </small>\r\n          <h3>Registration Form</h3>\r\n        </div>\r\n\r\n        <div className=\"form_box\">\r\n          <form>\r\n            <div className=\"row\">\r\n              <div className=\"col_5\">\r\n                <img\r\n                  src=\"https://firebasestorage.googleapis.com/v0/b/ifair-portal.appspot.com/o/assets%2FBusiness%20deal-cuate.png?alt=media&token=8ce437d0-5bef-4b5a-b04b-191ace6d03ea\"\r\n                  alt=\"\"\r\n                />\r\n              </div>\r\n              <div className=\"col_7\">\r\n                <div className=\"row\">\r\n                  <div className=\"col_6\">\r\n                    <div className=\"input_group\">\r\n                      <label>Full Name</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        name=\"fullName\"\r\n                        value={formValues.fullName}\r\n                        onChange={handleFormChange}\r\n                        id=\"fullName\"\r\n                        maxLength=\"25\"\r\n                        required\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"input_group\">\r\n                      <label>College Roll Number</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        name=\"collegeRollNo\"\r\n                        value={formValues.collegeRollNo}\r\n                        onChange={handleFormChange}\r\n                        id=\"collegeRollNo\"\r\n                        maxLength=\"9\"\r\n                        required\r\n                        autoComplete=\"off\"\r\n                        pattern=\"[0-9]{5,9}\"\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"select_group\">\r\n                      <label>College</label>\r\n                      <select\r\n                        name=\"college\"\r\n                        id=\"college\"\r\n                        onChange={handleFormChange}\r\n                        required\r\n                        disabled\r\n                      >\r\n                        <option default value=\"venky\">\r\n                          Sri Venkateswara College\r\n                        </option>\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div className=\"select_group\">\r\n                      <label>Year of study</label>\r\n                      <select\r\n                        name=\"year\"\r\n                        id=\"year\"\r\n                        onChange={handleFormChange}\r\n                        required\r\n                      >\r\n                        <option default value=\"1\">\r\n                          I Year\r\n                        </option>\r\n                        <option value=\"2\">II Year</option>\r\n                        <option value=\"3\">III Year</option>\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div className=\"select_group\">\r\n                      <label htmlFor=\"\">Course</label>\r\n                      <select\r\n                        name=\"course\"\r\n                        onChange={handleFormChange}\r\n                        id=\"course\"\r\n                        required\r\n                      >\r\n                        {coursesList.map((course) => (\r\n                          <option value={course}>{course}</option>\r\n                        ))}\r\n                      </select>\r\n                    </div>\r\n                    <div className=\"input_group\">\r\n                      <label htmlFor=\"\">Email Address</label>\r\n                      <input\r\n                        type=\"email\"\r\n                        name=\"emailAddress\"\r\n                        id=\"emailAddress\"\r\n                        value={formValues.emailAddress}\r\n                        onChange={handleFormChange}\r\n                        required\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"input_group\">\r\n                      <label htmlFor=\"\">Contact Number (WhatsApp)</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        name=\"contactNumber\"\r\n                        id=\"contactNumber\"\r\n                        value={formValues.contactNumber}\r\n                        onChange={handleFormChange}\r\n                        minLength=\"10\"\r\n                        maxLength=\"10\"\r\n                        required\r\n                        autoComplete=\"off\"\r\n                        pattern=\"[0-9]{10}\"\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"input_group\">\r\n                      <label htmlFor=\"\">Guardian's Name</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        name=\"guardianName\"\r\n                        id=\"guardianName\"\r\n                        value={formValues.guardianName}\r\n                        onChange={handleFormChange}\r\n                        maxLength=\"25\"\r\n                        required\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"col_6\">\r\n                    <div className=\"input_group\">\r\n                      <label htmlFor=\"\">Guardian's Contact Number</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        value={formValues.guardianNumber}\r\n                        name=\"guardianNumber\"\r\n                        id=\"guardianNumber\"\r\n                        onChange={handleFormChange}\r\n                        minLength=\"10\"\r\n                        maxLength=\"10\"\r\n                        required\r\n                        autoComplete=\"off\"\r\n                        pattern=\"[0-9]{10}\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"file_group\">\r\n                      <label htmlFor=\"\">Proof of Admission</label>\r\n                      <small>\r\n                        Upload scanned copy of your ID card or Admission Sheet\r\n                        in JPG format. <br />\r\n                        (Maximum file size limit: 1 MB)\r\n                      </small>\r\n                      <label htmlFor=\"admission\" className=\"upload_btn\">\r\n                        {filename.admission.length > 30\r\n                          ? filename.admission.slice(0, 29) + \"...\"\r\n                          : filename.admission}\r\n                      </label>\r\n                      <input\r\n                        type=\"file\"\r\n                        name=\"admission\"\r\n                        id=\"admission\"\r\n                        onChange={onFileUpload}\r\n                        accept=\".jpg, .jpeg\"\r\n                        required\r\n                      />\r\n                      <p className=\"error_message\">\r\n                        {formError.admission === 1 ? null : formError.admission}\r\n                      </p>\r\n                    </div>\r\n\r\n                    <div className=\"file_group\">\r\n                      <label htmlFor=\"\">Resume</label>\r\n                      <small>\r\n                        Upload a copy of your Resume in PDF format. <br />\r\n                        (Maximum file size limit: 10 MB)\r\n                      </small>\r\n                      <label htmlFor=\"resume\" className=\"upload_btn\">\r\n                        {filename.resume.length > 30\r\n                          ? filename.resume.slice(0, 29) + \"...\"\r\n                          : filename.resume}\r\n                      </label>\r\n                      <input\r\n                        type=\"file\"\r\n                        name=\"resume\"\r\n                        id=\"resume\"\r\n                        onChange={onFileUpload}\r\n                        accept=\".pdf\"\r\n                        required\r\n                      />\r\n                      <p className=\"error_message\">\r\n                        {formError.resume === 1 ? null : formError.resume}\r\n                      </p>\r\n                    </div>\r\n\r\n                    <div className=\"file_group\">\r\n                      <label htmlFor=\"\">Proof of Resume</label>\r\n\r\n                      <small>\r\n                        Upload an aggregated PDF of all certificates listed in\r\n                        your resume in PDF format.\r\n                        <br /> (Maximum file size limit: 25 MB)\r\n                      </small>\r\n\r\n                      <label htmlFor=\"proofOfResume\" className=\"upload_btn\">\r\n                        {filename.proofOfResume.length > 30\r\n                          ? filename.proofOfResume.slice(0, 29) + \"...\"\r\n                          : filename.proofOfResume}\r\n                      </label>\r\n\r\n                      <input\r\n                        type=\"file\"\r\n                        name=\"proofOfResume\"\r\n                        id=\"proofOfResume\"\r\n                        required\r\n                        onChange={onFileUpload}\r\n                        accept=\".pdf\"\r\n                      />\r\n\r\n                      <p className=\"error_message\">\r\n                        {formError.proofOfResume === 1\r\n                          ? null\r\n                          : formError.proofOfResume}\r\n                      </p>\r\n                    </div>\r\n\r\n                    {/* {formError.fieldMessage && (\r\n                      <p className=\"error_message\">\r\n                        {formError.fieldMessage === 1\r\n                          ? null\r\n                          : formError.fieldMessage}\r\n                      </p>\r\n                    )} */}\r\n\r\n                    <button className=\"submitButton\" onClick={handleSubmission}>\r\n                      {buttonText}\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RegistrationForm;\r\n","F:\\pcell-ifair-portal-original\\client\\src\\Help\\Help.js",[],"F:\\pcell-ifair-portal-original\\client\\src\\profile\\profile.js",["95","96","97","98"],"import React, { useState, useEffect } from \"react\";\r\nimport { useStateValue } from \"../utils/StateProvider\";\r\nimport { Redirect, useHistory, Link } from \"react-router-dom\";\r\nimport \"./profile.css\";\r\nimport {\r\n  storage,\r\n  firestore as db,\r\n  auth,\r\n} from \"../utils/firebase/firebaseConfig\";\r\n\r\nfunction Profile() {\r\n  const [{ user }, dispatch] = useStateValue();\r\n  const [thisUser, setThisUser] = useState({\r\n    fullName: null,\r\n    collegeRollNo: null,\r\n    year: null,\r\n    course: null,\r\n    emailAddress: null,\r\n    contactNumber: null,\r\n    guardianName: null,\r\n    guardianNumber: null,\r\n    college: \"Sri Venkateswara College\",\r\n    approved: false,\r\n    remarks: null,\r\n    level: null,\r\n    sno: null,\r\n    resume: null,\r\n    proofOfResume: null,\r\n    admission: null,\r\n    companyLimit: 0,\r\n  });\r\n\r\n  useEffect(async () => {\r\n    if (user) {\r\n      await db\r\n        .collection(\"users\")\r\n        .doc(user)\r\n        .get()\r\n        .then(async (doc) => {\r\n          const thisRef = storage.ref().child(\"users\").child(user);\r\n          let properties = {\r\n            admission: null,\r\n            resume: null,\r\n            proofOfResume: null,\r\n          };\r\n\r\n          for (const property in properties) {\r\n            await thisRef\r\n              .child(property.toString())\r\n              .getDownloadURL()\r\n              .then((url) => {\r\n                properties = { ...properties, [property]: url };\r\n              })\r\n              .catch((err) => {\r\n                console.log(err);\r\n                properties = { ...properties, [property]: null };\r\n              });\r\n          }\r\n          setThisUser({ ...thisUser, ...doc.data(), ...properties });\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(thisUser);\r\n  }, [thisUser]);\r\n\r\n  const [buttonText, setButtonText] = useState({\r\n    admission: \"Upload File\",\r\n    proofOfResume: \"Upload File\",\r\n    resume: \"Upload File\",\r\n  });\r\n  const [filename, setfileName] = useState({\r\n    admission: \"Choose File\",\r\n    proofOfResume: \"Choose File\",\r\n    resume: \"Choose File\",\r\n  });\r\n  const [uploadFiles, setFiles] = useState({\r\n    admission: null,\r\n    resume: null,\r\n    proofOfResume: null,\r\n  });\r\n  const [filecheck, setFilecheck] = useState({\r\n    resume: -1,\r\n    proofOfResume: -1,\r\n    admission: -1,\r\n  });\r\n\r\n  document.title = `${thisUser?.fullName} | Internship Fair 2021`;\r\n\r\n  const History = useHistory();\r\n\r\n  const logOut = async () => {\r\n    await auth.signOut().then(() => {\r\n      dispatch({\r\n        action: \"REMOVE_USER\",\r\n      });\r\n      History.push(\"/\");\r\n    });\r\n  };\r\n\r\n  const onFileUpload = async ({ target: { files, name } }) => {\r\n    const thisFile = files[0];\r\n\r\n    if (name.toString() === \"resume\" && thisFile.size / 1024 > 10 * 1024) {\r\n      setButtonText({\r\n        ...buttonText,\r\n        resume: \"File size limit exceeded.\",\r\n      });\r\n      alert(\"Please upload a file less than 10 MB.\");\r\n      setFilecheck({ ...filecheck, resume: -1 });\r\n    } else if (name.toString() === \"admission\" && thisFile.size / 1024 > 1024) {\r\n      setButtonText({\r\n        ...buttonText,\r\n        admission: \"File size limit exceeded.\",\r\n      });\r\n      alert(\"Please upload a file less than 1 MB.\");\r\n      setFilecheck({ ...filecheck, admission: -1 });\r\n    } else if (\r\n      name.toString() === \"proofOfResume\" &&\r\n      thisFile.size / 1024 > 25 * 1024\r\n    ) {\r\n      setButtonText({\r\n        ...buttonText,\r\n        proofOfResume: \"File size limit exceeded.\",\r\n      });\r\n      alert(\"Please upload a file less than 25 MB.\");\r\n      setFilecheck({ ...filecheck, proofOfResume: -1 });\r\n    } else {\r\n      await setFiles({\r\n        ...uploadFiles,\r\n        [name]: thisFile,\r\n      });\r\n      setFilecheck({ ...filecheck, [name]: 0 });\r\n      setfileName({ ...filename, [name]: thisFile.name });\r\n      setButtonText({ ...buttonText, [name]: \"Upload File\" });\r\n    }\r\n  };\r\n\r\n  const handleUpload = (property) => {\r\n    if (filecheck[property] === -1) {\r\n      alert(\"Upload a file within the size constraints.\");\r\n    } else {\r\n      setButtonText({ ...buttonText, [property]: \"Processing\" });\r\n      storage\r\n        .ref()\r\n        .child(\"users\")\r\n        .child(`${thisUser?.collegeRollNo}`)\r\n        .child(property)\r\n        .put(uploadFiles[property])\r\n        .then(() => {\r\n          setButtonText({ ...buttonText, [property]: \"Uploaded.\" });\r\n        })\r\n        .catch((err) => {\r\n          setButtonText({ ...buttonText, [property]: \"There was an error.\" });\r\n          console.log(err);\r\n        });\r\n    }\r\n  };\r\n\r\n  const deleteAccount = (e) => {\r\n    e.preventDefault();\r\n\r\n    const user = auth.currentUser;\r\n\r\n    db.collection(\"users\")\r\n      .doc(user.displayName)\r\n      .delete()\r\n      .then(() => {\r\n        const storageRef = storage.ref();\r\n\r\n        storageRef\r\n          .child(\"users\")\r\n          .child(user.displayName)\r\n          .child(\"resume\")\r\n          .delete()\r\n          .catch((err) => {\r\n            console.log(err);\r\n          });\r\n\r\n        storageRef\r\n          .child(\"users\")\r\n          .child(user.displayName)\r\n          .child(\"proofOfResume\")\r\n          .delete()\r\n          .catch((err) => {\r\n            console.log(err);\r\n          });\r\n\r\n        storageRef\r\n          .child(\"users\")\r\n          .child(user.displayName)\r\n          .child(\"admission\")\r\n          .delete()\r\n          .catch((err) => {\r\n            console.log(err);\r\n          });\r\n\r\n        user.delete().then(() => {\r\n          History.push(\"/\");\r\n        });\r\n      });\r\n  };\r\n\r\n  const selectCompanies = (e) => {\r\n    e.preventDefault();\r\n\r\n    dispatch({\r\n      type: \"SET_APPROVAL\",\r\n      approved: thisUser.approved,\r\n      companyLimit: thisUser.companyLimit,\r\n    });\r\n\r\n    History.push(\"/company/select\");\r\n  };\r\n\r\n  return user ? (\r\n    <div className=\"profile_page\">\r\n      <div className=\"container\">\r\n        <div className=\"navbar\">\r\n          <Link to=\"/\">\r\n            <div className=\"logo_box\">\r\n              <img src=\"./pcell_logo.png\" alt=\"\" />\r\n\r\n              <p>\r\n                The Placement Cell <br />\r\n                <span>Sri Venkateswara College</span>\r\n              </p>\r\n            </div>\r\n          </Link>\r\n\r\n          <div className=\"button_box\">\r\n            <button className=\"logout_button\" onClick={logOut}>\r\n              Log out\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"profile_info\">\r\n          {thisUser.resume &&\r\n          thisUser.proofOfResume &&\r\n          thisUser.admission ? null : (\r\n            <div className=\"flash warning\">\r\n              <p>You have not uploaded</p>{\" \"}\r\n              {thisUser.resume ? null : <li>Resume</li>}\r\n              {thisUser.proofOfResume ? null : <li>Proof of Resume</li>}\r\n              {thisUser.admission ? null : <li>Proof of Admission</li>}\r\n              <br />\r\n              <p>\r\n                Please upload these files in order to participate in the\r\n                Internship Fair, 2021. <br />\r\n                Scroll down on this page to upload the files. ↓\r\n              </p>\r\n            </div>\r\n          )}\r\n          <div className=\"delete_box\">\r\n            <p>\r\n              Accidentally entered wrong information such as your email address,\r\n              or details? You can delete your account and register again.{\" \"}\r\n            </p>\r\n            <button\r\n              className=\"submitButton deleteProfile\"\r\n              onClick={deleteAccount}\r\n            >\r\n              Delete my Account\r\n            </button>\r\n          </div>\r\n          <h1>Hello, {thisUser?.fullName}</h1>\r\n          <h4>My profile</h4>\r\n          <hr />\r\n          <h3 className=\"stage_indicator\">\r\n            You're at stage {`${thisUser?.level}`}\r\n          </h3>\r\n          <hr />\r\n          <h4>Files Approved: {thisUser?.approved ? \"Yes\" : \"No\"}</h4>\r\n          <p className=\"files_remarks\">\r\n            <strong>Remarks</strong>:{\" \"}\r\n            {thisUser?.remarks === \"\"\r\n              ? \"Yet to be reviewed.\"\r\n              : thisUser?.remarks}\r\n            {thisUser.approved ? (\r\n              <div className=\"company_selection\">\r\n                <button onClick={selectCompanies}>\r\n                  Go on to select companies ➞\r\n                </button>\r\n              </div>\r\n            ) : null}\r\n          </p>\r\n\r\n          <hr />\r\n          <div className=\"row\">\r\n            <div className=\"col_3\">\r\n              <div className=\"user_info\">\r\n                <strong>College Roll No: </strong>\r\n                <p>{thisUser?.collegeRollNo}</p>\r\n              </div>\r\n              <div className=\"user_info\">\r\n                <strong>College: </strong>\r\n                <p>{thisUser?.college}</p>\r\n              </div>\r\n              <div className=\"user_info\">\r\n                <strong>Course: </strong>\r\n                <p>{thisUser?.course}</p>\r\n              </div>\r\n            </div>\r\n            <div className=\"col_3\">\r\n              <div className=\"user_info\">\r\n                <strong>Email Address: </strong>\r\n                <p>{thisUser?.emailAddress}</p>\r\n              </div>\r\n              <div className=\"user_info\">\r\n                <strong>Year of Study: </strong>\r\n                <p>{thisUser?.year}</p>\r\n              </div>\r\n              <div className=\"user_info\">\r\n                <strong>Contact Number: </strong>\r\n                <p>{thisUser?.contactNumber}</p>\r\n              </div>\r\n            </div>\r\n            <div className=\"col_3\">\r\n              <div className=\"user_info\">\r\n                <strong>Guardian's Name: </strong>\r\n                <p>{`${thisUser?.guardianName}`}</p>\r\n              </div>\r\n              <div className=\"user_info\">\r\n                <strong>Guardian's Contact Number: </strong>\r\n                <p>{`${thisUser?.guardianNumber}`}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col_3\">\r\n              <div className=\"user_file\">\r\n                <strong>Admission Proof: </strong>\r\n                <a target=\"_blank\" rel=\"noreferrer\" href={thisUser?.admission}>\r\n                  {thisUser?.admission === null\r\n                    ? \"Not Uploaded\"\r\n                    : \"View your current submission here\"}\r\n                </a>\r\n              </div>\r\n            </div>\r\n            <div className=\"col_3\">\r\n              <div className=\"user_file\">\r\n                <strong>Resume: </strong>\r\n                <a target=\"_blank\" rel=\"noreferrer\" href={thisUser?.resume}>\r\n                  {thisUser?.resume === null\r\n                    ? \"Not Uploaded\"\r\n                    : \"View your current submission here\"}\r\n                </a>\r\n              </div>\r\n            </div>\r\n            <div className=\"col_3\">\r\n              <div className=\"user_file\">\r\n                <strong>Proof of Resume: </strong>\r\n                <a\r\n                  target=\"_blank\"\r\n                  rel=\"noreferrer\"\r\n                  href={thisUser?.proofOfResume}\r\n                >\r\n                  {thisUser?.proofOfResume === null\r\n                    ? \"Not Uploaded\"\r\n                    : \"View your current submission here\"}\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <hr />\r\n          <div className=\"reupload\">\r\n            <h3>File Upload</h3>\r\n            <p>\r\n              Upload your files here. After they've been uploaded successfully,\r\n              our team will verify them to make sure they meet our mandated\r\n              guidelines. <br />\r\n              <br />\r\n              Once successfully verified, the <strong>\r\n                Files Approved\r\n              </strong>{\" \"}\r\n              field above will reflect the same and you'll be able to\r\n              participate in the Internship Fair.\r\n              <br />\r\n              <br />\r\n              In case they do not meet our guidelines, you can check the\r\n              suggested changes in the <strong>Remarks</strong> field and after\r\n              making those changes, you can reupload your files.\r\n              <br />\r\n              <br />\r\n              In case you uploaded the wrong files, or your files weren't\r\n              successfully uploaded whilst registering your account, you can\r\n              reupload them here.{\" \"}\r\n            </p>\r\n            <form>\r\n              <div className=\"row\">\r\n                <div className=\"col_3\">\r\n                  <h4>Admission Proof</h4>\r\n                  <div className=\"file_group\">\r\n                    <small>\r\n                      Upload scanned copy of your ID card or Admission Sheet in\r\n                      JPG format. <br />\r\n                      (Maximum file size limit: 1 MB)\r\n                    </small>\r\n                    <label htmlFor=\"admission\" className=\"upload_btn\">\r\n                      {filename.admission.length > 30\r\n                        ? filename.admission.slice(0, 29) + \"...\"\r\n                        : filename.admission}\r\n                    </label>\r\n                    <input\r\n                      type=\"file\"\r\n                      name=\"admission\"\r\n                      id=\"admission\"\r\n                      onChange={onFileUpload}\r\n                      accept=\".jpg, .jpeg\"\r\n                      required\r\n                    />\r\n                    <button\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        handleUpload(\"admission\");\r\n                      }}\r\n                    >\r\n                      {buttonText.admission}\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"col_3\">\r\n                  <h4>Resume</h4>\r\n                  <div className=\"file_group\">\r\n                    <small>\r\n                      Upload a copy of your Resume in PDF format. <br />\r\n                      <br />\r\n                      (Maximum file size limit: 10 MB)\r\n                    </small>\r\n                    <label htmlFor=\"resume\" className=\"upload_btn\">\r\n                      {filename.resume.length > 30\r\n                        ? filename.resume.slice(0, 29) + \"...\"\r\n                        : filename.resume}\r\n                    </label>\r\n                    <input\r\n                      type=\"file\"\r\n                      name=\"resume\"\r\n                      id=\"resume\"\r\n                      onChange={onFileUpload}\r\n                      accept=\".pdf\"\r\n                      required\r\n                    />\r\n                    <button\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        handleUpload(\"resume\");\r\n                      }}\r\n                    >\r\n                      {buttonText.resume}\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"col_3\">\r\n                  <h4>Proof of Resume</h4>\r\n                  <div className=\"file_group\">\r\n                    <small>\r\n                      Upload an aggregated PDF of all certificates listed in\r\n                      your resume in PDF format.\r\n                      <br /> (Maximum file size limit: 25 MB)\r\n                    </small>\r\n                    <label htmlFor=\"proofOfResume\" className=\"upload_btn\">\r\n                      {filename.proofOfResume.length > 30\r\n                        ? filename.proofOfResume.slice(0, 29) + \"...\"\r\n                        : filename.proofOfResume}\r\n                    </label>\r\n                    <input\r\n                      type=\"file\"\r\n                      name=\"proofOfResume\"\r\n                      id=\"proofOfResume\"\r\n                      onChange={onFileUpload}\r\n                      accept=\".pdf\"\r\n                      required\r\n                    />\r\n                    <button\r\n                      type=\"submit\"\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        handleUpload(\"proofOfResume\");\r\n                      }}\r\n                    >\r\n                      {buttonText.proofOfResume}\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <Redirect to=\"/\" />\r\n  );\r\n}\r\n\r\nexport default Profile;\r\n","F:\\pcell-ifair-portal-original\\client\\src\\login\\login.js",["99"],"import React, { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport \"./login.css\";\r\n\r\nimport { useStateValue } from \"../utils/StateProvider\";\r\n\r\nimport { auth } from \"../utils/firebase/firebaseConfig\";\r\n\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\n\r\nfunction Login() {\r\n  const History = useHistory();\r\n\r\n  const [formValues, setFormValues] = useState({\r\n    email: null,\r\n    password: null,\r\n  });\r\n\r\n  const [{ user }, dispatch] = useStateValue();\r\n\r\n  const [passwordVisibility, setPasswordVisibility] = useState(\"password\");\r\n\r\n  const [buttonText, setButtonText] = useState(\"Log In\");\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    setButtonText(\"Processing\");\r\n\r\n    auth\r\n      .signInWithEmailAndPassword(formValues.email, formValues.password)\r\n      .then((userCredential) => {\r\n        dispatch({\r\n          type: \"SET_USER\",\r\n          user: userCredential.user.displayName,\r\n        });\r\n\r\n        History.push(\"/profile\");\r\n      })\r\n      .catch((error) => {\r\n        setButtonText(\"There was an error.\");\r\n      });\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setFormValues({ ...formValues, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleVisibility = (e) => {\r\n    if (passwordVisibility === \"password\") {\r\n      setPasswordVisibility(\"text\");\r\n    } else {\r\n      setPasswordVisibility(\"password\");\r\n    }\r\n  };\r\n\r\n  const resetPassword = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (formValues.email === null) {\r\n      alert(\"Enter your email address first.\");\r\n    } else {\r\n      auth\r\n        .sendPasswordResetEmail(formValues.email)\r\n        .then(() => {\r\n          alert(\"Email Sent.\");\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          alert(\"There was an error.\");\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login\">\r\n      <div className=\"container\">\r\n        <div className=\"title_box\">\r\n          <Link to=\"/\">\r\n            <img\r\n              src=\"https://firebasestorage.googleapis.com/v0/b/ifair-portal.appspot.com/o/assets%2Fpcell_logo.png?alt=media&token=0fab47f3-c265-4b11-a5a5-162437e594c2\"\r\n              alt=\"The Placement Cell, Sri Venkateswara College { Logo }\"\r\n            />\r\n          </Link>\r\n          <h2>Internship Fair 2021</h2>\r\n          <small>\r\n            The Placement Cell, Sri Venkateswara College, Delhi University\r\n          </small>\r\n          <h3>Log In</h3>\r\n        </div>\r\n        <div className=\"form_box\">\r\n          <form>\r\n            <div className=\"row\">\r\n              <div className=\"col_6\">\r\n                <img\r\n                  src=\"https://firebasestorage.googleapis.com/v0/b/ifair-portal.appspot.com/o/assets%2F4334828.png?alt=media&token=2e4e062b-892b-4b51-b0e8-a562be08ff92\"\r\n                  alt=\"\"\r\n                />\r\n              </div>\r\n              <div className=\"col_6\">\r\n                <div className=\"input_group\">\r\n                  <label>Email Address</label>\r\n                  <input\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    id=\"email\"\r\n                    autoComplete=\"off\"\r\n                    placeholder=\"\"\r\n                    minLength=\"1\"\r\n                    required\r\n                    onChange={handleChange}\r\n                    value={formValues.email}\r\n                  />\r\n                </div>\r\n                <div className=\"input_group\">\r\n                  <label>Password</label>\r\n                  <input\r\n                    type={passwordVisibility}\r\n                    name=\"password\"\r\n                    id=\"password\"\r\n                    placeholder=\"\"\r\n                    required\r\n                    minLength=\"1\"\r\n                    onChange={handleChange}\r\n                    value={formValues.password}\r\n                  />\r\n                  <button onClick={handleVisibility} type=\"button\">\r\n                    <VisibilityIcon />\r\n                  </button>\r\n                </div>\r\n                <button onClick={handleSubmit} className=\"submitButton\">\r\n                  {buttonText}\r\n                </button>\r\n                <button\r\n                  className=\"submitButton resetpassword\"\r\n                  onClick={resetPassword}\r\n                >\r\n                  Forgot password? Reset it here.\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","F:\\pcell-ifair-portal-original\\client\\src\\components\\footer\\Footer.js",[],"F:\\pcell-ifair-portal-original\\client\\src\\utils\\firebase\\firebaseConfig.js",[],"F:\\pcell-ifair-portal-original\\client\\src\\other\\CoursesList.js",[],"F:\\pcell-ifair-portal-original\\client\\src\\admin\\AdminLogin.js",["100","101"],"import React, { useState, useEffect } from \"react\";\r\nimport { auth } from \"../utils/firebase/firebaseConfig\";\r\nimport { useStateValue } from \"../utils/StateProvider\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport \"./adminlogin.css\";\r\n\r\nexport default function AdminLogin() {\r\n  const History = useHistory();\r\n  const [formValues, setFormValues] = useState({ email: null, password: null });\r\n\r\n  const [{ user }, dispatch] = useStateValue();\r\n\r\n  const handleChange = ({ target: { name, value } }) => {\r\n    setFormValues({ ...formValues, [name]: value });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    auth\r\n      .signInWithEmailAndPassword(formValues.email, formValues.password)\r\n      .then((user) => {\r\n        dispatch({\r\n          type: \"SET_USER\",\r\n          user: user.user.displayName,\r\n        });\r\n      })\r\n      .then(() => {\r\n        History.push(\"/admin/logistics\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"admin_login\">\r\n      <div className=\"container\">\r\n        <h1>Admin Log in</h1>\r\n        <div className=\"admin_login_box\">\r\n          <input\r\n            type=\"text\"\r\n            name=\"email\"\r\n            id=\"email\"\r\n            value={formValues.email}\r\n            onChange={handleChange}\r\n          />\r\n          <input\r\n            type=\"password\"\r\n            name=\"password\"\r\n            id=\"password\"\r\n            value={formValues.password}\r\n            onChange={handleChange}\r\n          />\r\n          <button onClick={handleSubmit} type=\"submit\">\r\n            Log in\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","F:\\pcell-ifair-portal-original\\client\\src\\components\\userProfile.js\\UserProfile.js",["102","103","104","105","106","107","108","109","110"],"F:\\pcell-ifair-portal-original\\client\\src\\admin\\Logistics.js",["111","112","113","114","115"],"F:\\pcell-ifair-portal-original\\client\\src\\downloadData\\downloadData.js",[],"F:\\pcell-ifair-portal-original\\client\\src\\company-grid\\Grid.js",["116","117","118","119"],"F:\\pcell-ifair-portal-original\\client\\src\\companyPage\\CompanyPage.js",[],{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","severity":1,"message":"125","line":1,"column":10,"nodeType":"126","messageId":"127","endLine":1,"endColumn":14},{"ruleId":"128","severity":1,"message":"129","line":30,"column":17,"nodeType":"130","messageId":"131","endLine":32,"endColumn":12},{"ruleId":"128","severity":1,"message":"129","line":33,"column":18,"nodeType":"130","messageId":"131","endLine":36,"endColumn":12},{"ruleId":"124","severity":1,"message":"132","line":1,"column":27,"nodeType":"126","messageId":"127","endLine":1,"endColumn":36},{"ruleId":"124","severity":1,"message":"133","line":33,"column":12,"nodeType":"126","messageId":"127","endLine":33,"endColumn":16},{"ruleId":"134","severity":1,"message":"135","line":33,"column":13,"nodeType":"130","endLine":62,"endColumn":4},{"ruleId":"128","severity":1,"message":"136","line":51,"column":21,"nodeType":"130","messageId":"131","endLine":53,"endColumn":16},{"ruleId":"128","severity":1,"message":"136","line":54,"column":22,"nodeType":"130","messageId":"131","endLine":57,"endColumn":16},{"ruleId":"134","severity":1,"message":"137","line":62,"column":6,"nodeType":"138","endLine":62,"endColumn":8,"suggestions":"139"},{"ruleId":"124","severity":1,"message":"133","line":19,"column":12,"nodeType":"126","messageId":"127","endLine":19,"endColumn":16},{"ruleId":"124","severity":1,"message":"132","line":1,"column":27,"nodeType":"126","messageId":"127","endLine":1,"endColumn":36},{"ruleId":"124","severity":1,"message":"133","line":12,"column":12,"nodeType":"126","messageId":"127","endLine":12,"endColumn":16},{"ruleId":"134","severity":1,"message":"135","line":46,"column":13,"nodeType":"130","endLine":79,"endColumn":4},{"ruleId":"128","severity":1,"message":"136","line":63,"column":19,"nodeType":"130","messageId":"131","endLine":65,"endColumn":14},{"ruleId":"128","severity":1,"message":"136","line":66,"column":20,"nodeType":"130","messageId":"131","endLine":68,"endColumn":14},{"ruleId":"134","severity":1,"message":"140","line":79,"column":6,"nodeType":"138","endLine":79,"endColumn":8,"suggestions":"141"},{"ruleId":"134","severity":1,"message":"142","line":87,"column":6,"nodeType":"138","endLine":87,"endColumn":16,"suggestions":"143"},{"ruleId":"134","severity":1,"message":"135","line":89,"column":13,"nodeType":"130","endLine":115,"endColumn":4},{"ruleId":"128","severity":1,"message":"136","line":106,"column":19,"nodeType":"130","messageId":"131","endLine":108,"endColumn":14},{"ruleId":"128","severity":1,"message":"136","line":109,"column":20,"nodeType":"130","messageId":"131","endLine":111,"endColumn":14},{"ruleId":"134","severity":1,"message":"140","line":115,"column":6,"nodeType":"138","endLine":115,"endColumn":18,"suggestions":"144"},{"ruleId":"124","severity":1,"message":"145","line":4,"column":8,"nodeType":"126","messageId":"127","endLine":4,"endColumn":18},{"ruleId":"124","severity":1,"message":"125","line":6,"column":3,"nodeType":"126","messageId":"127","endLine":6,"endColumn":7},{"ruleId":"124","severity":1,"message":"146","line":8,"column":3,"nodeType":"126","messageId":"127","endLine":8,"endColumn":10},{"ruleId":"124","severity":1,"message":"147","line":9,"column":3,"nodeType":"126","messageId":"127","endLine":9,"endColumn":12},{"ruleId":"134","severity":1,"message":"135","line":20,"column":13,"nodeType":"130","endLine":29,"endColumn":4},{"ruleId":"124","severity":1,"message":"132","line":1,"column":17,"nodeType":"126","messageId":"127","endLine":1,"endColumn":26},{"ruleId":"124","severity":1,"message":"148","line":5,"column":16,"nodeType":"126","messageId":"127","endLine":5,"endColumn":18},{"ruleId":"124","severity":1,"message":"146","line":6,"column":3,"nodeType":"126","messageId":"127","endLine":6,"endColumn":10},{"ruleId":"124","severity":1,"message":"133","line":14,"column":12,"nodeType":"126","messageId":"127","endLine":14,"endColumn":16},"no-native-reassign",["149"],"no-negated-in-lhs",["150"],"no-unused-vars","'auth' is defined but never used.","Identifier","unusedVar","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'thisUser', 'thisUser'.","ArrowFunctionExpression","unsafeRefs","'useEffect' is defined but never used.","'user' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","Function declared in a loop contains unsafe references to variable(s) 'properties', 'properties'.","React Hook useEffect has missing dependencies: 'thisUser' and 'user'. Either include them or remove the dependency array. You can also do a functional update 'setThisUser(t => ...)' if you only need 'thisUser' in the 'setThisUser' call.","ArrayExpression",["151"],"React Hook useEffect has missing dependencies: 'rollno' and 'thisUser'. Either include them or remove the dependency array. You can also do a functional update 'setThisUser(t => ...)' if you only need 'thisUser' in the 'setThisUser' call.",["152"],"React Hook useEffect has a missing dependency: 'status'. Either include it or remove the dependency array. You can also do a functional update 'setStatus(s => ...)' if you only need 'status' in the 'setStatus' call.",["153"],["154"],"'CourseList' is defined but never used.","'storage' is defined but never used.","'functions' is defined but never used.","'db' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},"Update the dependencies array to be: [thisUser, user]",{"range":"163","text":"164"},"Update the dependencies array to be: [rollno, thisUser]",{"range":"165","text":"166"},"Update the dependencies array to be: [status, thisUser]",{"range":"167","text":"168"},"Update the dependencies array to be: [buttonText, rollno, thisUser]",{"range":"169","text":"170"},[1709,1711],"[thisUser, user]",[2125,2127],"[rollno, thisUser]",[2294,2304],"[status, thisUser]",[3101,3113],"[buttonText, rollno, thisUser]"]